#!/usr/bin/env python3
"""
StorytellerPi Web Interface Quick Fix
Applies common fixes for web interface issues
"""

import os
import sys
import shutil
import subprocess
import logging
from pathlib import Path

def setup_logging():
    """Setup logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def fix_systemctl_path():
    """Fix systemctl path issues"""
    logger = logging.getLogger(__name__)
    
    # Find systemctl
    systemctl_paths = [
        '/usr/bin/systemctl',
        '/bin/systemctl', 
        '/usr/local/bin/systemctl',
        '/sbin/systemctl',
        '/usr/sbin/systemctl'
    ]
    
    systemctl_location = None
    for path in systemctl_paths:
        if os.path.exists(path):
            systemctl_location = path
            break
    
    if not systemctl_location:
        # Try to find via which
        try:
            result = subprocess.run(['which', 'systemctl'], capture_output=True, text=True)
            if result.returncode == 0:
                systemctl_location = result.stdout.strip()
        except:
            pass
    
    if systemctl_location:
        logger.info(f"Found systemctl at: {systemctl_location}")
        
        # Create a wrapper script if needed
        wrapper_path = '/usr/local/bin/storytellerpi-systemctl'
        try:
            with open(wrapper_path, 'w') as f:
                f.write(f'#!/bin/bash\n{systemctl_location} "$@"\n')
            
            os.chmod(wrapper_path, 0o755)
            logger.info(f"Created systemctl wrapper at {wrapper_path}")
            
        except PermissionError:
            logger.warning("Cannot create systemctl wrapper - insufficient permissions")
        except Exception as e:
            logger.error(f"Failed to create systemctl wrapper: {e}")
    else:
        logger.warning("systemctl not found - service management will use fallback methods")
    
    return systemctl_location is not None

def fix_environment_variables():
    """Fix missing environment variables"""
    logger = logging.getLogger(__name__)
    
    env_file = os.path.join(os.path.dirname(__file__), '.env')
    
    # Default environment variables
    default_env = {
        'INSTALL_DIR': os.path.dirname(__file__),
        'SERVICE_NAME': 'storytellerpi',
        'LOG_DIR': os.path.join(os.path.dirname(__file__), 'logs'),
        'WEB_SECRET_KEY': 'storytellerpi-secret-key-change-me',
        'WEB_HOST': '0.0.0.0',
        'WEB_PORT': '5000',
        'WEB_DEBUG': 'false'
    }
    
    # Read existing .env
    existing_env = {}
    if os.path.exists(env_file):
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_env[key.strip()] = value.strip()
        except Exception as e:
            logger.error(f"Error reading .env file: {e}")
    
    # Add missing variables
    updated = False
    for key, value in default_env.items():
        if key not in existing_env:
            existing_env[key] = value
            updated = True
            logger.info(f"Added missing environment variable: {key}")
    
    # Write updated .env
    if updated:
        try:
            with open(env_file, 'w') as f:
                f.write("# StorytellerPi Environment Configuration\n")
                f.write("# Auto-generated by fix_web_interface.py\n\n")
                
                for key, value in existing_env.items():
                    f.write(f"{key}={value}\n")
            
            logger.info(f"Updated .env file: {env_file}")
        except Exception as e:
            logger.error(f"Failed to write .env file: {e}")
            return False
    
    return True

def fix_missing_directories():
    """Create missing directories"""
    logger = logging.getLogger(__name__)
    
    required_dirs = [
        'logs',
        'main/static',
        'main/templates'
    ]
    
    base_dir = os.path.dirname(__file__)
    
    for dir_name in required_dirs:
        dir_path = os.path.join(base_dir, dir_name)
        if not os.path.exists(dir_path):
            try:
                os.makedirs(dir_path, exist_ok=True)
                logger.info(f"Created directory: {dir_path}")
            except Exception as e:
                logger.error(f"Failed to create directory {dir_path}: {e}")
                return False
    
    return True

def fix_permissions():
    """Fix file permissions"""
    logger = logging.getLogger(__name__)
    
    executable_files = [
        'debug_web_interface.py',
        'fix_web_interface.py',
        'main/web_interface.py',
        'main/storyteller_main.py'
    ]
    
    base_dir = os.path.dirname(__file__)
    
    for file_name in executable_files:
        file_path = os.path.join(base_dir, file_name)
        if os.path.exists(file_path):
            try:
                os.chmod(file_path, 0o755)
                logger.info(f"Fixed permissions for: {file_path}")
            except Exception as e:
                logger.warning(f"Could not fix permissions for {file_path}: {e}")
    
    return True

def install_missing_packages():
    """Install missing Python packages"""
    logger = logging.getLogger(__name__)
    
    required_packages = [
        'flask',
        'flask-socketio', 
        'psutil',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            # Try importing the package
            if package == 'flask-socketio':
                __import__('flask_socketio')
            elif package == 'python-dotenv':
                __import__('dotenv')
            else:
                __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        logger.info(f"Installing missing packages: {', '.join(missing_packages)}")
        
        for package in missing_packages:
            try:
                subprocess.run([
                    sys.executable, '-m', 'pip', 'install', package
                ], check=True, capture_output=True)
                logger.info(f"Installed: {package}")
            except subprocess.CalledProcessError as e:
                logger.error(f"Failed to install {package}: {e}")
                return False
            except Exception as e:
                logger.error(f"Error installing {package}: {e}")
                return False
    
    return True

def create_minimal_templates():
    """Create minimal HTML templates if missing"""
    logger = logging.getLogger(__name__)
    
    templates_dir = os.path.join(os.path.dirname(__file__), 'main', 'templates')
    
    # Minimal base template
    base_template = '''<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}StorytellerPi{% endblock %}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .status.running { background-color: #d4edda; }
        .status.stopped { background-color: #f8d7da; }
        .btn { padding: 8px 16px; margin: 5px; border: none; border-radius: 3px; cursor: pointer; }
        .btn.start { background-color: #28a745; color: white; }
        .btn.stop { background-color: #dc3545; color: white; }
        .btn.restart { background-color: #17a2b8; color: white; }
    </style>
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>'''
    
    # Minimal dashboard template
    dashboard_template = '''{% extends "base.html" %}
{% block content %}
<h1>StorytellerPi Dashboard</h1>

<div class="status {{ service_status.status }}">
    <h3>Service Status: {{ service_status.status|title }}</h3>
    <p>Details: {{ service_status.details }}</p>
</div>

<div>
    <button class="btn start" onclick="controlService('start')">Start Service</button>
    <button class="btn stop" onclick="controlService('stop')">Stop Service</button>
    <button class="btn restart" onclick="controlService('restart')">Restart Service</button>
</div>

<h3>System Info</h3>
<ul>
    <li>CPU: {{ system_info.cpu_percent }}%</li>
    <li>Memory: {{ system_info.memory_percent }}%</li>
    <li>Uptime: {{ system_info.uptime }}</li>
</ul>

<script>
function controlService(action) {
    fetch(`/api/service/${action}`, {method: 'POST'})
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            location.reload();
        })
        .catch(error => {
            alert('Error: ' + error);
        });
}
</script>
{% endblock %}'''
    
    # Create templates if they don't exist
    templates = {
        'base.html': base_template,
        'dashboard.html': dashboard_template
    }
    
    for filename, content in templates.items():
        filepath = os.path.join(templates_dir, filename)
        if not os.path.exists(filepath):
            try:
                with open(filepath, 'w') as f:
                    f.write(content)
                logger.info(f"Created template: {filename}")
            except Exception as e:
                logger.error(f"Failed to create template {filename}: {e}")
                return False
    
    return True

def main():
    """Main fix function"""
    logger = setup_logging()
    logger.info("Starting StorytellerPi Web Interface Fix")
    
    fixes_applied = []
    
    # Apply fixes
    logger.info("Fixing missing directories...")
    if fix_missing_directories():
        fixes_applied.append("Created missing directories")
    
    logger.info("Fixing environment variables...")
    if fix_environment_variables():
        fixes_applied.append("Fixed environment variables")
    
    logger.info("Installing missing packages...")
    if install_missing_packages():
        fixes_applied.append("Installed missing packages")
    
    logger.info("Creating minimal templates...")
    if create_minimal_templates():
        fixes_applied.append("Created minimal templates")
    
    logger.info("Fixing file permissions...")
    if fix_permissions():
        fixes_applied.append("Fixed file permissions")
    
    logger.info("Fixing systemctl path...")
    if fix_systemctl_path():
        fixes_applied.append("Fixed systemctl path")
    else:
        fixes_applied.append("Configured fallback service management")
    
    # Summary
    logger.info("\n=== FIXES APPLIED ===")
    for fix in fixes_applied:
        logger.info(f"✓ {fix}")
    
    logger.info("\n=== NEXT STEPS ===")
    logger.info("1. Run the web interface: python3 main/web_interface.py")
    logger.info("2. Open browser to: http://localhost:5000")
    logger.info("3. If issues persist, run: python3 debug_web_interface.py")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())